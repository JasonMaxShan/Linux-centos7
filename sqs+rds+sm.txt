pymql层需要自己加
import sys
import boto3
from botocore.exceptions import ClientError
import json
import pymysql
import os

table_name = os.environ['TB_NAME']  
db_name = os.environ['RDS_DB_NAME']


def get_secret():

    secret_name = "##CHANGE NAME##"
    region_name = "cn-northwest-1"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS CMK.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = get_secret_value_response['SecretString']
            return secret
        else:
            decoded_binary_secret = base64.b64decode(get_secret_value_response['SecretBinary'])
            return decoded_binary_secret


def lambda_handler(event, context):
    #SQS
    for item in event['Records']:
        messageAttributes=item['messageAttributes']
        mykey=messageAttributes['mykey']['stringValue']
        myvalue=messageAttributes['myvalue']['stringValue']
        #数据库操作
        content = {}
        secret = get_secret()
        SecretString = json.loads(secret)
        user = SecretString['username']
        pwd = SecretString['password']
        host = SecretString['host']
        # 连接数据库
        db = pymysql.connect(host, user, pwd, db_name)
        cursor = db.cursor()
        # 数据库语句
        sql = 'INSERT INTO kv(mykey,myvalue) VALUES(%s,%s)'
        args = (mykey,myvalue)
        cursor.execute(sql, args=args)
        db.commit()
        sql_2 = "SELECT * FROM "+table_name
        try:
            # 执行SQL语句
            cursor.execute(sql_2)
            # 获取所有记录列表
            results = cursor.fetchall()
        except:
            print("Error: unable to fetch data")
        for item in results:
            kv = list(item)
            content.update({kv[0]: kv[1]})
    
            # 关闭数据库连接
        db.close()
        print(content)
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda!'),
        'db': db_name,
        'table_name': table_name,
        'content': json.dumps(content),
        'mykey': mykey,
        'myvalue': myvalue

    }
    
